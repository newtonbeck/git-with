#!/usr/bin/env python3
import sys
import yaml
import users
import os

def help():
    print("""
git-with

Usage:
    git-with introduce <alias> <name> <email>       Introduces a new person to the script

    git-with <alias-1> <...> <alias-n>              Configures people that will be added as co-authors to your next commits

    gith-with init                                  Configures your repo to use git-with, run this command inside your repo's root folder

Example:
    git-with introduce bilbo "Bilbo Baggings" bilbo.baggings@shire.org

    git-with bilbo gandalf
    """)

def introduce(alias, name, email):
    users.introduce(alias, name, email)
    print("Hello {name} 👋 ! It's nice to meet you 🙇‍♂️".replace("{name}", name))
    print("You can now add {name} as a co-author to your commits by running the following command:".replace("{name}", name))
    print()
    print("\tgit-with {alias}".replace("{alias}", alias))
    print()

def add(aliases):
    added_aliases = users.add(aliases)
    print("🎉 now <{aliases}> will be added as co-author(s) ✍️ to your commits 🚀".replace("{aliases}", ', '.join(added_aliases)))
    if (len(aliases) > len(added_aliases)):
        unknown_aliases = list(set(aliases).union(set(added_aliases)) - set(aliases).intersection(set(added_aliases)))
        print("⚠️ <{unknown_aliases}> won't be added as co-author(s) because they were not introduce to me yet.".replace("{unknown_aliases}", ", ".join(unknown_aliases)))
        print("Please introduce 🤝 them to me first by running the following commands:")
        print()
        for unknown_alias in unknown_aliases:
            print("\tgit-with introduce {unknown_alias} \"Name Surname\" email@address.com".replace("{unknown_alias}", unknown_alias))
        print()

def init():
    git_with_home = os.path.dirname(os.path.realpath(__file__))

    if "GIT_WITH_HOME" in os.environ:
        git_with_home = os.environ["GIT_WITH_HOME"]
    
    if not os.path.exists(".git/hooks"):
        print("😱 I could not find any .git/hooks directory.")
        print("Please go to a repository's root directory to run the git-with init command")
        return

    if os.path.exists(".git/hooks/prepare-commit-msg") and os.path.exists(".git/hooks/users.py"):
        print("🚀 your repository is already configured to use git-with")
        return

    if os.path.exists(".git/hooks/prepare-commit-msg"):
        print("⚠️ It seems your repository is already using another prepare-commit-msg hook")
        print("😢 Unfortunately git-with can not work along with other prepare-commit-msg hooks")
        return

    os.symlink("{git_with_home}/prepare-commit-msg".replace("{git_with_home}", git_with_home), ".git/hooks/prepare-commit-msg")
    os.symlink("{git_with_home}/users.py".replace("{git_with_home}", git_with_home), ".git/hooks/users.py")

    print("🚀 your repository is now configured to use git-with, have fun coding in group")

def main():
    if len(sys.argv) > 1:
        match sys.argv[1]:
            case "help": help()
            case "init": init()
            case "introduce": introduce(sys.argv[2], sys.argv[3], sys.argv[4])
            case _: 
                if len(sys.argv) > 1: 
                    add(sys.argv[1:])
    else:
        help()

if __name__ == "__main__":
    main()
